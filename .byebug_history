continue
quit!
user.reset_token
next
user.email
assert_template 'password_resets/edit'
quit!
self
quit!
token
continue
params[:id]
user
continue
user
continue
next
step
user
params[:email]
params[:password]
params[:email]
continue
params[:id]
attribute
token
continue
attribute
token
continue
step
continue
step
continue
next
step
params[:id]
quit!
digest
next
step
params[:id]
token
attribute
continue
next
step
attribute
digest
continue
attribute
token
continue
digest
next
attribute
atrribute
continue
attribute
digest
next
continue
user
quit!
user
redirect_to user
continue
next
continue
self
continue
contineu
quit!
get edit_account_activation_path("invalid token")
edit_account_activation_path("invalid token")
quit!
session[:user_id]
log_in_as(user)
next
step
next
step
next
step
next
user
huser
continue
!session[:user_id].nil?
session[:user_id].nil?
session[:user_id]
step
next
step
next
user.activated?
user
next
user
quit
continue
user
next
user.activated?
user.activated
user
next
step
user.authenticate(params[:session][:password])
user
quit
is_logged_in?
next
password
user.email
post login_path, session: { email: user.email, password: password, remember_me: remember_me}
next
remember_me
next
remember_me
options[:password]
user
password
next
password
step
next
continue
!session[:user_id].nil?
![:user_id].nil?
![:user_id]
step
is_logged_in?
log_in_as(user)
next
log_in_as(user)
user.activated?
user
next
user
assigns(:user)
continue
assigns(:user)
assigns(user)
user
continue
next
remember_me
next
password
next
step
continue
next
step
next
step
!session[:user_id].nil?
session[:user_id].nil?
session[:user_id]
user_id
!session[:user_id].nil?
step
continue
next
step
continue
next
step
!session[:user_id].nil?
step
next
step
next
continue
next
user.activated?
next
assigns(:user)
next
ActionMailer::Base.deliveries.size
continue
next
@user
continue
CGI::escape(user.email)
CGS::escape(user.email)
user.email
continue
next
continue
next
step
@user
continue
next
current_user.admin?
continue
nextcontinue
next
current_user.admin?
current_user
continue
current_user.admin?
current_user
continue
@other_user.reload.admin?
@other_user.admin?
@other_user
continue
@other_user.admin?
@user
quit!
User.paginate(page: 1).to_a
User.paginate(page: 1).to_hash
User.paginate(page: 1).to_h
User.paginate(page: 1).to_a
User.paginate(page: 1).class
User.paginate(page: 1)
User.paginate(page: 1).to_s.scan('hello')
User.paginate(page: 1).to_s.scan
User.paginate(page: 1).to_s
User.paginate(page: 1).scan("hello")
User.paginate(page: 1)
User.paginate
User.paginate(page: 1)
User.paginate(page: 1)[name: "hello"]
User.paginate(page: 1)["hello"]
User.paginate(page: 1)[name: "hello"]
User.paginate(page: 1)[id: 1]
User.paginate(page: 1)
User.paginate(page; 1)
user
user.name
quit
user.name
next
user.name
next
user.name
next
user.name
assert_select 'a[href=?]', user_path(user), text: user.name
continue
next
selector
next
@selected
@selected ||= nil
next
*args
step
continue
params[:page]
params[page]
params.page
